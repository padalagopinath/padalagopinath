#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define FAST ios_base :: sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define endl '\n'
#define mod 1000000007


//Generates string from number
void solve(string s, string curr = "", int i = 0) {
    if (i == s.length()) {
        cout << curr << endl;
        return;
    }

    int dig = s[i] - '0';
    curr.push_back((dig + 'A' - 1));
    solve(s, curr, i + 1);
    curr.pop_back();

    if (i + 1 != s.length()) {
        int sdig = s[i + 1] - '0';
        int no = dig * 10 + sdig;
        if (no <= 26) {
            curr.push_back((no + 'A' - 1));
            solve(s, curr, i + 2);
        }
    }
}





// Square root using Binary search

float square_root(int n, int p) {

    int s = 0;
    int e = n;

    float ans = -1;


    while (s <= e) {
        int mid = (s + e) >> 1;

        if (mid * mid == n) {
            return mid;
        }

        if (mid * mid < n) {
            ans = mid;
            s = mid + 1;
        }
        else {
            e = mid - 1;
        }
    }

    // Floating part (brute force)
    float inc = 0.1;
    for (int i = 1; i <= p; i++) {

        while (ans * ans <= n) {
            ans += inc;
        }
        //overshot the value
        ans -= inc;
        inc /= 10;
    }




    return ans;

}



int main()
{

    FAST;
    int t;
    //t = 1;
    cin >> t;
    while (t--)
    {
        // vector<int> arr{2, 4, 1, 3, 68, 5};
        // //solve("122212");
        // // for (auto i : arr)
        // //     cout << i << " ";
        // cout << square_root(2, 4);

        int n;
        cin >> n;
        ll a[n], sum = 0;
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }


        for (int i = 0; i < n; i++) {
            if (a[i] == -1)
                a[i] = sum / i;

            sum += a[i];
        }

        for (auto i : a)
            cout << i << " ";
        cout << endl;
    }



    return 0;
}
