#include<iostream>
#include <vector>
using namespace std;
long long int  query(vector<long long int > &tree, long long int  index, long long int  ql, long long int  qr, long long int  l, long long int  r)
{
  if(ql > r || qr<l)
    {
      return 0;
    }
  if(ql <= l && qr >= r)
  {
      return tree[index];
  }
 
  long long int  mid = (l+r)/2;
  long long int  left = query(tree, index*2+1 , ql, qr , l, mid);
  long long int  right = query(tree, index*2 +2, ql , qr , mid+1, r);
  return (left+right);
}
 
 
void createSegmentTree(vector<long long int >&vec, vector<long long int >&tree, long long int  index, long long int  left,long long int  right)
{
 
  if(left > right)
    return;
 
  if(left == right)
  {
      tree[index] = vec[left];
      return;
  }
 
  long long int  mid = (left + right )/2;
 
  createSegmentTree(vec, tree, index*2+1, left , mid);
 
  createSegmentTree(vec, tree, index*2 + 2, mid + 1, right);
 
  tree[index] = tree[index*2+1]+tree[index*2 + 2];
  return;
}
 
int main()
{
   ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
 
  long long int  t;
  cin >> t;
  //scanf("%d",&t);
   for(int k=0;k<t;k++)
  {
  long long int  n;
  cin >> n;
 //scanf("%d",&n);
  vector<long long int > vec(n,0);
 
  for(long long int  i = 0;i <n; i++)
  //scanf("%d",&vec[i]);
    cin >> vec[i];
 
  vector<long long int > tree(4*n + 2, 0);
  long long int  index = 0, left = 0, right = n-1;
  createSegmentTree(vec , tree, index , left , right);
 
  long long int  q, ql , qr;
  //scanf("%d",&q);
  cin >> q;
 
  for(int k=0;k<q;k++)
  {
  cin >> ql >> qr;
  //scanf("%d",&ql);
  //scanf("%d",&qr);
  cout << query(tree, 0, ql-1, qr-1, 0, n - 1) << "\n";
    }
  }
  return 0;
}
